{"version":3,"sources":["components/NavMenu.tsx","components/Layout.tsx","components/GalleryComponent.tsx","components/imageNames.ts","components/Contacts.tsx","App.tsx","serviceWorker.ts","index.tsx","logo.svg","contacts.png"],"names":["NavMenu","_Component","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","toggleNavbar","bind","assertThisInitialized","state","collapsed","inherits","createClass","key","value","setState","react_default","a","createElement","Navbar","className","light","Container","NavbarBrand","tag","Link","to","src","logo","alt","NavbarToggler","onClick","Collapse","isOpen","navbar","NavItem","NavLink","Component","displayName","name","Layout","apply","arguments","NavMenu_NavMenu","children","IMAGES","map","x","concat","thumb","thumbnail","thumbnailWidth","thumbnailHeight","isSelected","GalleryComponent","Gallery_default","images","lazyLoad","showThumbnails","enableImageSelection","Contacts","currentCount","incrementCounter","contacts","App","Layout_Layout","Route","exact","path","component","Boolean","window","location","hostname","match","baseUrl","document","getElementsByTagName","getAttribute","rootElement","getElementById","ReactDOM","render","BrowserRouter","basename","src_App_0","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"mWAUaA,EAAb,SAAAC,GAGE,SAAAD,EAAaE,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAN,IAClBG,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAJ,GAAAS,KAAAH,KAAMJ,KAEDQ,aAAeP,EAAKO,aAAaC,KAAlBP,OAAAQ,EAAA,EAAAR,CAAAD,IACpBA,EAAKU,MAAQ,CACXC,WAAW,GALKX,EAHtB,OAAAC,OAAAW,EAAA,EAAAX,CAAAJ,EAAAC,GAAAG,OAAAY,EAAA,EAAAZ,CAAAJ,EAAA,EAAAiB,IAAA,eAAAC,MAAA,WAaIZ,KAAKa,SAAS,CACZL,WAAYR,KAAKO,MAAMC,cAd7B,CAAAG,IAAA,SAAAC,MAAA,WAmBI,OACEE,EAAAC,EAAAC,cAAA,cACEF,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAQC,UAAU,+EAA+EC,OAAK,GACpGL,EAAAC,EAAAC,cAACI,EAAA,EAAD,KACEN,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAaC,IAAKC,IAAMC,GAAG,YAAWV,EAAAC,EAAAC,cAAA,OAAKS,IAAKC,IAAMR,UAAU,WAAWS,IAAI,UAC/Eb,EAAAC,EAAAC,cAACY,EAAA,EAAD,CAAeC,QAAS7B,KAAKI,aAAcc,UAAU,SACrDJ,EAAAC,EAAAC,cAACc,EAAA,EAAD,CAAUZ,UAAU,uCAAuCa,QAAS/B,KAAKO,MAAMC,UAAWwB,QAAM,GAC9FlB,EAAAC,EAAAC,cAAA,MAAIE,UAAU,wBACZJ,EAAAC,EAAAC,cAACiB,EAAA,EAAD,KACEnB,EAAAC,EAAAC,cAACkB,EAAA,EAAD,CAASZ,IAAKC,IAAML,UAAU,YAAYM,GAAG,KAA7C,+CAEFV,EAAAC,EAAAC,cAACiB,EAAA,EAAD,KACEnB,EAAAC,EAAAC,cAACkB,EAAA,EAAD,CAASZ,IAAKC,IAAML,UAAU,YAAYM,GAAG,YAA7C,8DA/BlB9B,EAAA,CAA6ByC,aAAhBzC,EACJ0C,YAAc1C,EAAQ2C,KCPxB,IAAMC,EAAb,SAAA3C,GAAA,SAAA2C,IAAA,OAAAxC,OAAAC,EAAA,EAAAD,CAAAE,KAAAsC,GAAAxC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAwC,GAAAC,MAAAvC,KAAAwC,YAAA,OAAA1C,OAAAW,EAAA,EAAAX,CAAAwC,EAAA3C,GAAAG,OAAAY,EAAA,EAAAZ,CAAAwC,EAAA,EAAA3B,IAAA,SAAAC,MAAA,WAGI,OACEE,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACyB,EAAD,MACA3B,EAAAC,EAAAC,cAACI,EAAA,EAAD,KACGpB,KAAKJ,MAAM8C,eAPtBJ,EAAA,CAA4BH,8BCAtBQ,ECJQ,CACZ,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,wCACA,0BACA,wCACA,0BACA,0BACA,0BACA,0BACA,0BACA,wCACA,0BACA,0BACA,0BACA,0BACA,wCACA,wCACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,2BAGgEC,IAAI,SAAAC,GAAC,MAAK,CAC1EpB,IAAG,WAAAqB,OAAaD,GAChBE,MAAK,iBAAAD,OAAmBD,MDzCAD,IAAI,SAAAC,GAAC,MAAK,CAClCpB,IAAKoB,EAAEpB,IACPuB,UAAWH,EAAEE,MACbE,eAAgB,IAChBC,gBAAiB,IACjBC,YAAY,KAGDC,EAAmB,kBAAMtC,EAAAC,EAAAC,cAACqC,EAAAtC,EAAD,CAASuC,OAAQX,EAAQY,UAAU,EAAMC,gBAAgB,EAAOC,sBAAsB,sBEJ/GC,UAAb,SAAA/D,GAEI,SAAA+D,EAAY9D,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAA0D,IACf7D,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA4D,GAAAvD,KAAAH,KAAMJ,KACDW,MAAQ,CAAEoD,aAAc,GAC7B9D,EAAK+D,iBAAmB/D,EAAK+D,iBAAiBvD,KAAtBP,OAAAQ,EAAA,EAAAR,CAAAD,IAHTA,EAFvB,OAAAC,OAAAW,EAAA,EAAAX,CAAA4D,EAAA/D,GAAAG,OAAAY,EAAA,EAAAZ,CAAA4D,EAAA,EAAA/C,IAAA,mBAAAC,MAAA,WASQZ,KAAKa,SAAS,CACV8C,aAAc3D,KAAKO,MAAMoD,aAAe,MAVpD,CAAAhD,IAAA,SAAAC,MAAA,WAeQ,OAAOE,EAAAC,EAAAC,cAAA,WAEAF,EAAAC,EAAAC,cAAA,OAAKS,IAAKoC,IAAU3C,UAAU,gBAAgBS,IAAI,cAjBjE+B,EAAA,CAA8BvB,cCQf2B,UATO,WAClB,OACEhD,EAAAC,EAAAC,cAAC+C,EAAD,KACIjD,EAAAC,EAAAC,cAACgD,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWf,IACjCtC,EAAAC,EAAAC,cAACgD,EAAA,EAAD,CAAOE,KAAK,WAAWC,UAAWT,OCCxBU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVN,IAAMC,EAAUC,SAASC,qBAAqB,QAAQ,GAAGC,aAAa,QAChEC,EAAcH,SAASI,eAAe,QAC5CC,IAASC,OACPlE,EAAAC,EAAAC,cAACiE,EAAA,EAAD,CAAeC,SAAUT,GACvB3D,EAAAC,EAAAC,cAACmE,EAAD,OACgBN,GD4Hd,kBAAmBO,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,mCE3InBC,EAAAC,QAAiBC,EAAAC,EAAuB,qDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB","file":"static/js/main.0f22aaa6.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { Collapse, Container, Navbar, NavbarBrand, NavbarToggler, NavItem, NavLink } from 'reactstrap';\r\nimport { Link } from 'react-router-dom';\r\nimport './NavMenu.css';\r\nimport logo from \"../logo.svg\";\r\n\r\ninterface IState {\r\n    collapsed: boolean;\r\n}\r\n\r\nexport class NavMenu extends Component<{},IState> {\r\n  static displayName = NavMenu.name;\r\n\r\n  constructor (props) {\r\n    super(props);\r\n\r\n    this.toggleNavbar = this.toggleNavbar.bind(this);\r\n    this.state = {\r\n      collapsed: true\r\n    };\r\n  }\r\n\r\n  toggleNavbar () {\r\n    this.setState({\r\n      collapsed: !this.state.collapsed\r\n    });\r\n  }\r\n\r\n  render () {\r\n    return (\r\n      <header>\r\n        <Navbar className=\"navbar-expand-sm navbar-toggleable-sm ng-white border-bottom box-shadow mb-3\" light>\r\n          <Container>\r\n            <NavbarBrand tag={Link} to=\"/contact\"><img src={logo} className=\"App-logo\" alt=\"logo\" /></NavbarBrand>\r\n            <NavbarToggler onClick={this.toggleNavbar} className=\"mr-2\" />\r\n            <Collapse className=\"d-sm-inline-flex flex-sm-row-reverse\" isOpen={!this.state.collapsed} navbar>\r\n              <ul className=\"navbar-nav flex-grow\">\r\n                <NavItem>\r\n                  <NavLink tag={Link} className=\"text-dark\" to=\"/\">Галерея</NavLink>\r\n                </NavItem>\r\n                <NavItem>\r\n                  <NavLink tag={Link} className=\"text-dark\" to=\"/contact\">Контакты</NavLink>\r\n                </NavItem>\r\n              </ul>\r\n            </Collapse>\r\n          </Container>\r\n        </Navbar>\r\n      </header>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\nimport { Container } from 'reactstrap';\r\nimport { NavMenu } from './NavMenu';\r\n\r\nexport class Layout extends Component {\r\n\r\n  render () {\r\n    return (\r\n      <div>\r\n        <NavMenu />\r\n        <Container>\r\n          {this.props.children}\r\n        </Container>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport Gallery from \"react-grid-gallery\";\r\nimport { imageNames } from \"./imageNames\";\r\n\r\nconst IMAGES = imageNames.map(x => ({\r\n  src: x.src,\r\n  thumbnail: x.thumb,\r\n  thumbnailWidth: 200,\r\n  thumbnailHeight: 200,\r\n  isSelected: false,\r\n}));\r\n\r\nexport const GalleryComponent = () => <Gallery images={IMAGES} lazyLoad={true} showThumbnails={false} enableImageSelection={false} />;\r\n","const names = [\r\n  \"2018-11-30 15-08-06.JPG\",\r\n  \"2018-11-30 15-08-15.JPG\",\r\n  \"2018-12-15 21-56-50.JPG\",\r\n  \"2018-12-17 22-04-56.JPG\",\r\n  \"2018-12-17 22-30-19.JPG\",\r\n  \"2018-12-22 13-49-08.JPG\",\r\n  \"2018-12-23 21-47-01.JPG\",\r\n  \"2019-04-06 20-42-37.JPG\",\r\n  \"2019-04-14 11-57-02.JPG\",\r\n  \"2019-04-16 22-31-13.JPG\",\r\n  \"2019-04-23 21-33-25.JPG\",\r\n  \"2019-04-29 21-14-29.JPG\",\r\n  \"2019-05-09 18-42-15.JPG\",\r\n  \"2018-12-28 22-33-01_1546065932553.JPG\",\r\n  \"2019-01-13 14-58-42.JPG\",\r\n  \"2019-01-25 20-19-00_1548656456112.JPG\",\r\n  \"2019-02-02 13-21-26.JPG\",\r\n  \"2019-02-27 15-33-48.JPG\",\r\n  \"2019-03-05 19-32-26.JPG\",\r\n  \"2019-03-05 19-33-39.JPG\",\r\n  \"2019-04-07 13-37-26.JPG\",\r\n  \"2019-05-09 18-42-15_1557457050733.JPG\",\r\n  \"2019-05-14 18-05-06.JPG\",\r\n  \"2019-05-16 15-24-46.JPG\",\r\n  \"2019-05-17 13-00-17.JPG\",\r\n  \"2019-05-17 13-22-22.JPG\",\r\n  \"2019-03-05 19-34-52_1551816924119.JPG\",\r\n  \"2019-03-17 15-41-22_1552857961293.JPG\",\r\n  \"2019-03-26 11-08-51.JPG\",\r\n  \"2019-03-27 22-18-41.JPG\",\r\n  \"2019-04-01 16-54-25.JPG\",\r\n  \"2019-04-06 12-36-55.JPG\",\r\n  \"2019-04-06 20-32-29.JPG\",\r\n  \"2019-04-10 14-57-06.JPG\",\r\n  \"2019-05-17 13-24-09.JPG\",\r\n  \"2019-05-21 22-18-56.JPG\",\r\n  \"2019-05-27 09-00-49.JPG\",\r\n  \"2019-05-27 15-25-43.JPG\",\r\n  \"2019-06-04 14-16-37.JPG\",\r\n  \"2019-06-04 14-17-01.JPG\"\r\n];\r\n\r\nexport const imageNames: { src: string; thumb: string }[] = names.map(x => ({\r\n  src: `/images/${x}`,\r\n  thumb: `/images/thumb_${x}`\r\n}));\r\n","import React, { Component } from 'react';\r\nimport contacts from \"../contacts.png\";\r\nimport './contacts.css';\r\n\r\ninterface IState {\r\n    currentCount: number;\r\n}\r\n\r\nexport class Contacts extends Component<{}, IState> {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { currentCount: 0 };\r\n        this.incrementCounter = this.incrementCounter.bind(this);\r\n    }\r\n\r\n    incrementCounter() {\r\n        this.setState({\r\n            currentCount: this.state.currentCount + 1\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return <div>\r\n            {\r\n               <img src={contacts} className=\"contacts-logo\" alt=\"logo\" />\r\n            }\r\n        </div>;\r\n    }\r\n}\r\n","import React from 'react';\nimport { Route } from 'react-router';\nimport { Layout } from './components/Layout';\nimport { GalleryComponent } from \"./components/GalleryComponent\";\nimport { Contacts } from './components/Contacts';\nimport './App.css';\n\nconst App: React.FC = () => {\n    return (\n      <Layout>\n          <Route exact path='/' component={GalleryComponent} />\n          <Route path='/contact' component={Contacts} />\n        </Layout>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import 'bootstrap/dist/css/bootstrap.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst baseUrl = document.getElementsByTagName('base')[0].getAttribute('href');\nconst rootElement = document.getElementById('root');\nReactDOM.render(\n  <BrowserRouter basename={baseUrl}>\n    <App />\n  </BrowserRouter>, rootElement);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","module.exports = __webpack_public_path__ + \"static/media/contacts.713866e7.png\";"],"sourceRoot":""}